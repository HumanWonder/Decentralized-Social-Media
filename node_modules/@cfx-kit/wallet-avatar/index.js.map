{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import MersenneTwister from 'mersenne-twister';\nimport html from './html';\n\nconst colors = [\n    '#01888C', // teal\n    '#FC7500', // bright orange\n    '#034F5D', // dark teal\n    '#F73F01', // orangered\n    '#FC1960', // magenta\n    '#C7144C', // raspberry\n    '#F3C100', // goldenrod\n    '#1598F2', // lightning blue\n    '#2465E1', // sail blue\n    '#F19E02', // gold\n];\n\nconst shapeCount = 4;\nconst svgNamespaceURI = 'http://www.w3.org/2000/svg';\n\ninterface HSLType {\n    h: number;\n    s: number;\n    l: number;\n}\n\nfunction HSLToHex(hsl: HSLType) {\n    let { h, s, l } = hsl;\n    s /= 100;\n    l /= 100;\n\n    let c = (1 - Math.abs(2 * l - 1)) * s,\n        x = c * (1 - Math.abs(((h / 60) % 2) - 1)),\n        m = l - c / 2,\n        _r = 0,\n        _g = 0,\n        _b = 0;\n\n    if (0 <= h && h < 60) {\n        _r = c;\n        _g = x;\n        _b = 0;\n    } else if (60 <= h && h < 120) {\n        _r = x;\n        _g = c;\n        _b = 0;\n    } else if (120 <= h && h < 180) {\n        _r = 0;\n        _g = c;\n        _b = x;\n    } else if (180 <= h && h < 240) {\n        _r = 0;\n        _g = x;\n        _b = c;\n    } else if (240 <= h && h < 300) {\n        _r = x;\n        _g = 0;\n        _b = c;\n    } else if (300 <= h && h < 360) {\n        _r = c;\n        _g = 0;\n        _b = x;\n    }\n    // Having obtained RGB, convert channels to hex\n    let r = Math.round((_r + m) * 255).toString(16),\n        g = Math.round((_g + m) * 255).toString(16),\n        b = Math.round((_b + m) * 255).toString(16);\n\n    // Prepend 0s, if necessary\n    if (r.length == 1) r = '0' + r;\n    if (g.length == 1) g = '0' + g;\n    if (b.length == 1) b = '0' + b;\n\n    return '#' + r + g + b;\n}\n\nfunction addressToNumber(address: string): number {\n    const addr = address.slice(2, 10);\n    const seed = parseInt(addr, 16);\n    return seed;\n}\n\nexport class WalletAvatarGenerate {\n    constructor(public mt: MersenneTwister) {}\n    generateAvatarSvg(address: string) {\n        const html = this.generateAvatarHTML(address);\n        const temp = document.createElement('template');\n        temp.innerHTML = html;\n        return temp.content.firstChild as SVGSVGElement;\n    }\n\n    generateAvatarURL(address: string) {\n        const html = this.generateAvatarHTML(address);\n        return `data:image/svg+xml;base64,${btoa(html)}`;\n    }\n\n    private canvasRender(address: string, size: number) {\n        const diameter = size;\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d')!;\n        canvas.height = canvas.width = size;\n        this.mt.init_seed(addressToNumber(address));\n        const remainingColors = this.hueShift(colors.slice());\n        const bgColor = this.genColor(remainingColors);\n        ctx.fillStyle = bgColor;\n        ctx.fillRect(0, 0, diameter, diameter);\n        for (let i = 0; i < shapeCount - 1; i++) {\n            const total = shapeCount - 1;\n            const firstRot = this.mt.random();\n            const angle = Math.PI * 2 * firstRot;\n            const velocity = (diameter * this.mt.random()) / total + (diameter * i) / total;\n\n            const tx = Math.cos(angle) * velocity;\n            const ty = Math.sin(angle) * velocity;\n\n            const secondRot = this.mt.random();\n            const rot = firstRot * 360 + secondRot * 180;\n            const fill = this.genColor(remainingColors);\n\n            const p = new Path2D();\n            p.rect(0, 0, diameter, diameter);\n            ctx.fillStyle = fill;\n            const { x, y } = new DOMMatrix()\n                .translate(0, 0)\n                .rotate(rot)\n                .transformPoint({ x: -diameter / 2, y: -diameter / 2 });\n            ctx.translate(x + diameter / 2 + tx, y + diameter / 2 + ty);\n            ctx.rotate((rot * Math.PI) / 180);\n\n            ctx.fill(p);\n            ctx.resetTransform();\n        }\n        return canvas;\n    }\n\n    generateAvatarPNG(address: string, quality: number = 2) {\n        const size = (quality > 1 ? Math.min(10, quality) : 1) * 100;\n        return this.canvasRender(address, size).toDataURL('image/png', 1);\n    }\n\n    generateAvatarHTML(address: string) {\n        this.mt.init_seed(addressToNumber(address));\n        const remainingColors = this.hueShift(colors.slice());\n        const bgColor = this.genColor(remainingColors);\n        const bgRectHTML = html`<rect x=\"0\" y=\"0\" width=\"100\" height=\"100\" fill=\"${bgColor}\"></rect>`;\n\n        const items = Array(shapeCount - 1)\n            .fill('$')\n            .map((_, i) => {\n                return this.genShape(remainingColors, i, shapeCount - 1);\n            });\n\n        const svgHTML = html`<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 100 100\" xmlns=\"${svgNamespaceURI}\">${bgRectHTML}${items}</svg>`;\n\n        return svgHTML.getHTML();\n    }\n\n    genShape(remainingColors: Array<string>, i: number, total: number) {\n        const diameter = 100;\n        const center = diameter / 2;\n        const firstRot = this.mt.random();\n        const angle = Math.PI * 2 * firstRot;\n        const velocity = (diameter / total) * this.mt.random() + (i * diameter) / total;\n\n        const tx = Math.cos(angle) * velocity;\n        const ty = Math.sin(angle) * velocity;\n\n        const translate = 'translate(' + tx + ' ' + ty + ')';\n        const secondRot = this.mt.random();\n        const rot = firstRot * 360 + secondRot * 180;\n        const rotate = 'rotate(' + rot.toFixed(1) + ' ' + center + ' ' + center + ')';\n        const transform = translate + ' ' + rotate;\n        const fill = this.genColor(remainingColors);\n\n        const rectHTML = html`<rect x=\"0\" y=\"0\" width=\"${diameter}\" height=\"${diameter}\" transform=\"${transform}\" fill=\"${fill}\"></rect>`;\n        return rectHTML;\n    }\n    genColor(colors: Array<string>) {\n        // must call once\n        this.mt.random();\n        const idx = Math.floor(colors.length * this.mt.random());\n        const color = colors.splice(idx, 1)[0];\n        return color;\n    }\n    hueShift(colors: Array<string>) {\n        const wobble = 30;\n        const amount = this.mt.random() * 30 - wobble / 2;\n        const rotate = (hex: string) => this.colorRotate(hex, amount);\n        return colors.map(rotate);\n    }\n    colorRotate(hex: string, degrees: number) {\n        const hsl = this.hexToHSL(hex);\n        let hue = hsl.h;\n        hue = (hue + degrees) % 360;\n        hue = hue < 0 ? 360 + hue : hue;\n        hsl.h = hue;\n        return HSLToHex(hsl);\n    }\n    hexToHSL(hex: string) {\n        // Convert hex to RGB first\n        let r = parseInt('0x' + hex[1] + hex[2]);\n        let g = parseInt('0x' + hex[3] + hex[4]);\n        let b = parseInt('0x' + hex[5] + hex[6]);\n        // Then to HSL\n        r /= 255;\n        g /= 255;\n        b /= 255;\n        let cmin = Math.min(r, g, b),\n            cmax = Math.max(r, g, b),\n            delta = cmax - cmin,\n            h = 0,\n            s = 0,\n            l = 0;\n\n        if (delta == 0) h = 0;\n        else if (cmax == r) h = ((g - b) / delta) % 6;\n        else if (cmax == g) h = (b - r) / delta + 2;\n        else h = (r - g) / delta + 4;\n\n        h = Math.round(h * 60);\n\n        if (h < 0) h += 360;\n\n        l = (cmax + cmin) / 2;\n        s = delta == 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\n        s = +(s * 100).toFixed(1);\n        l = +(l * 100).toFixed(1);\n\n        return { h, s, l };\n    }\n}\n\nexport function generateAvatarSVG(address: string) {\n    const wag = new WalletAvatarGenerate(new MersenneTwister());\n    return wag.generateAvatarSvg(address);\n}\n\nexport function generateAvatarURL(address: string) {\n    const wag = new WalletAvatarGenerate(new MersenneTwister());\n    return wag.generateAvatarURL(address);\n}\n\nexport function generateAvatarHTML(address: string) {\n    const wag = new WalletAvatarGenerate(new MersenneTwister());\n    return wag.generateAvatarHTML(address);\n}\n\nexport function generateAvatarPNG(address: string, quality?: number) {\n    const wag = new WalletAvatarGenerate(new MersenneTwister());\n    return wag.generateAvatarPNG(address, quality);\n}\n\nexport default generateAvatarSVG;\n"]}