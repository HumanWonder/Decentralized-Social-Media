{"version":3,"file":"html.js","sourceRoot":"","sources":["../src/html.ts"],"names":[],"mappings":"AAEA,MAAM,UAAU,UAAU,CAAC,IAAY;IACnC,MAAM,GAAG,GAAG;QACR,GAAG,EAAE,OAAO;QACZ,GAAG,EAAE,MAAM;QACX,GAAG,EAAE,MAAM;QACX,GAAG,EAAE,QAAQ;QACb,GAAG,EAAE,QAAQ;KAChB,CAAC;IACF,OAAO,GAAG,IAAI,EAAE,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC,CAAC,EAAE,EAAE;QACvC,OAAO,GAAG,CAAC,CAAc,CAAC,IAAI,CAAC,CAAC;IACpC,CAAC,CAAC,CAAC;AACP,CAAC;AAED,MAAM,UAAU,WAAW,CAAC,CAAM;IAC9B,IAAI,CAAC,YAAY,YAAY,EAAE;QAC3B,OAAO,CAAC,CAAC,QAAQ,EAAE,CAAC;KACvB;IACD,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;QAClB,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;KAChD;IACD,IAAI,CAAC,OAAO,CAAC,KAAK,SAAS,IAAI,CAAC,KAAK,KAAK,CAAC,IAAI,CAAC,KAAK,SAAS,IAAI,CAAC,KAAK,IAAI,EAAE;QAC1E,OAAO,EAAE,CAAC;KACb;IACD,OAAO,UAAU,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC;AAED,MAAM,OAAO,YAAY;IAGrB,YAAY,OAA6B,EAAE,MAAa;QACpD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACzB,CAAC;IACD,OAAO;QACH,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC;QACjC,IAAI,GAAG,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;QACrB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACrC,MAAM,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACxB,GAAG,IAAI,GAAG,WAAW,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC;SAC3C;QACD,OAAO,GAAG,CAAC;IACf,CAAC;IACD,QAAQ;QACJ,OAAO,IAAI,CAAC,OAAO,EAAE,CAAC;IAC1B,CAAC;CACJ;AAED,MAAM,CAAC,OAAO,UAAU,IAAI,CAAC,OAA6B,EAAE,GAAG,MAAa;IACxE,OAAO,IAAI,YAAY,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;AAC7C,CAAC","sourcesContent":["type EscapeKey = '&' | '<' | '>' | '\"' | \"'\";\n\nexport function escapeHTML(html: string): string {\n    const map = {\n        '&': '&amp;',\n        '<': '&lt;',\n        '>': '&gt;',\n        '\"': '&quot;',\n        \"'\": '&#039;',\n    };\n    return `${html}`.replace(/[&<>\"']/g, (i) => {\n        return map[i as EscapeKey] || i;\n    });\n}\n\nexport function valueToHTML(v: any): string {\n    if (v instanceof HTMLTemplate) {\n        return v.toString();\n    }\n    if (Array.isArray(v)) {\n        return v.map((i) => valueToHTML(i)).join('');\n    }\n    if ((typeof v === 'boolean' && v === false) || v === undefined || v === null) {\n        return '';\n    }\n    return escapeHTML(v);\n}\n\nexport class HTMLTemplate {\n    strings: TemplateStringsArray;\n    values: any[];\n    constructor(strings: TemplateStringsArray, values: any[]) {\n        this.strings = strings;\n        this.values = values;\n    }\n    getHTML(): string {\n        const { strings, values } = this;\n        let str = strings[0];\n        for (let i = 1; i < strings.length; i++) {\n            const v = values[i - 1];\n            str += `${valueToHTML(v)}${strings[i]}`;\n        }\n        return str;\n    }\n    toString() {\n        return this.getHTML();\n    }\n}\n\nexport default function html(strings: TemplateStringsArray, ...values: any[]) {\n    return new HTMLTemplate(strings, values);\n}\n"]}