{"ast":null,"code":"import MersenneTwister from 'mersenne-twister';\nimport html from './html';\nconst colors = ['#01888C', '#FC7500', '#034F5D', '#F73F01', '#FC1960', '#C7144C', '#F3C100', '#1598F2', '#2465E1', '#F19E02' // gold\n];\nconst shapeCount = 4;\nconst svgNamespaceURI = 'http://www.w3.org/2000/svg';\nfunction HSLToHex(hsl) {\n  let {\n    h,\n    s,\n    l\n  } = hsl;\n  s /= 100;\n  l /= 100;\n  let c = (1 - Math.abs(2 * l - 1)) * s,\n    x = c * (1 - Math.abs(h / 60 % 2 - 1)),\n    m = l - c / 2,\n    _r = 0,\n    _g = 0,\n    _b = 0;\n  if (0 <= h && h < 60) {\n    _r = c;\n    _g = x;\n    _b = 0;\n  } else if (60 <= h && h < 120) {\n    _r = x;\n    _g = c;\n    _b = 0;\n  } else if (120 <= h && h < 180) {\n    _r = 0;\n    _g = c;\n    _b = x;\n  } else if (180 <= h && h < 240) {\n    _r = 0;\n    _g = x;\n    _b = c;\n  } else if (240 <= h && h < 300) {\n    _r = x;\n    _g = 0;\n    _b = c;\n  } else if (300 <= h && h < 360) {\n    _r = c;\n    _g = 0;\n    _b = x;\n  }\n  // Having obtained RGB, convert channels to hex\n  let r = Math.round((_r + m) * 255).toString(16),\n    g = Math.round((_g + m) * 255).toString(16),\n    b = Math.round((_b + m) * 255).toString(16);\n  // Prepend 0s, if necessary\n  if (r.length == 1) r = '0' + r;\n  if (g.length == 1) g = '0' + g;\n  if (b.length == 1) b = '0' + b;\n  return '#' + r + g + b;\n}\nfunction addressToNumber(address) {\n  const addr = address.slice(2, 10);\n  const seed = parseInt(addr, 16);\n  return seed;\n}\nexport class WalletAvatarGenerate {\n  constructor(mt) {\n    this.mt = mt;\n  }\n  generateAvatarSvg(address) {\n    const html = this.generateAvatarHTML(address);\n    const temp = document.createElement('template');\n    temp.innerHTML = html;\n    return temp.content.firstChild;\n  }\n  generateAvatarURL(address) {\n    const html = this.generateAvatarHTML(address);\n    return `data:image/svg+xml;base64,${btoa(html)}`;\n  }\n  canvasRender(address, size) {\n    const diameter = size;\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    canvas.height = canvas.width = size;\n    this.mt.init_seed(addressToNumber(address));\n    const remainingColors = this.hueShift(colors.slice());\n    const bgColor = this.genColor(remainingColors);\n    ctx.fillStyle = bgColor;\n    ctx.fillRect(0, 0, diameter, diameter);\n    for (let i = 0; i < shapeCount - 1; i++) {\n      const total = shapeCount - 1;\n      const firstRot = this.mt.random();\n      const angle = Math.PI * 2 * firstRot;\n      const velocity = diameter * this.mt.random() / total + diameter * i / total;\n      const tx = Math.cos(angle) * velocity;\n      const ty = Math.sin(angle) * velocity;\n      const secondRot = this.mt.random();\n      const rot = firstRot * 360 + secondRot * 180;\n      const fill = this.genColor(remainingColors);\n      const p = new Path2D();\n      p.rect(0, 0, diameter, diameter);\n      ctx.fillStyle = fill;\n      const {\n        x,\n        y\n      } = new DOMMatrix().translate(0, 0).rotate(rot).transformPoint({\n        x: -diameter / 2,\n        y: -diameter / 2\n      });\n      ctx.translate(x + diameter / 2 + tx, y + diameter / 2 + ty);\n      ctx.rotate(rot * Math.PI / 180);\n      ctx.fill(p);\n      ctx.resetTransform();\n    }\n    return canvas;\n  }\n  generateAvatarPNG(address, quality = 2) {\n    const size = (quality > 1 ? Math.min(10, quality) : 1) * 100;\n    return this.canvasRender(address, size).toDataURL('image/png', 1);\n  }\n  generateAvatarHTML(address) {\n    this.mt.init_seed(addressToNumber(address));\n    const remainingColors = this.hueShift(colors.slice());\n    const bgColor = this.genColor(remainingColors);\n    const bgRectHTML = html`<rect x=\"0\" y=\"0\" width=\"100\" height=\"100\" fill=\"${bgColor}\"></rect>`;\n    const items = Array(shapeCount - 1).fill('$').map((_, i) => {\n      return this.genShape(remainingColors, i, shapeCount - 1);\n    });\n    const svgHTML = html`<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 100 100\" xmlns=\"${svgNamespaceURI}\">${bgRectHTML}${items}</svg>`;\n    return svgHTML.getHTML();\n  }\n  genShape(remainingColors, i, total) {\n    const diameter = 100;\n    const center = diameter / 2;\n    const firstRot = this.mt.random();\n    const angle = Math.PI * 2 * firstRot;\n    const velocity = diameter / total * this.mt.random() + i * diameter / total;\n    const tx = Math.cos(angle) * velocity;\n    const ty = Math.sin(angle) * velocity;\n    const translate = 'translate(' + tx + ' ' + ty + ')';\n    const secondRot = this.mt.random();\n    const rot = firstRot * 360 + secondRot * 180;\n    const rotate = 'rotate(' + rot.toFixed(1) + ' ' + center + ' ' + center + ')';\n    const transform = translate + ' ' + rotate;\n    const fill = this.genColor(remainingColors);\n    const rectHTML = html`<rect x=\"0\" y=\"0\" width=\"${diameter}\" height=\"${diameter}\" transform=\"${transform}\" fill=\"${fill}\"></rect>`;\n    return rectHTML;\n  }\n  genColor(colors) {\n    // must call once\n    this.mt.random();\n    const idx = Math.floor(colors.length * this.mt.random());\n    const color = colors.splice(idx, 1)[0];\n    return color;\n  }\n  hueShift(colors) {\n    const wobble = 30;\n    const amount = this.mt.random() * 30 - wobble / 2;\n    const rotate = hex => this.colorRotate(hex, amount);\n    return colors.map(rotate);\n  }\n  colorRotate(hex, degrees) {\n    const hsl = this.hexToHSL(hex);\n    let hue = hsl.h;\n    hue = (hue + degrees) % 360;\n    hue = hue < 0 ? 360 + hue : hue;\n    hsl.h = hue;\n    return HSLToHex(hsl);\n  }\n  hexToHSL(hex) {\n    // Convert hex to RGB first\n    let r = parseInt('0x' + hex[1] + hex[2]);\n    let g = parseInt('0x' + hex[3] + hex[4]);\n    let b = parseInt('0x' + hex[5] + hex[6]);\n    // Then to HSL\n    r /= 255;\n    g /= 255;\n    b /= 255;\n    let cmin = Math.min(r, g, b),\n      cmax = Math.max(r, g, b),\n      delta = cmax - cmin,\n      h = 0,\n      s = 0,\n      l = 0;\n    if (delta == 0) h = 0;else if (cmax == r) h = (g - b) / delta % 6;else if (cmax == g) h = (b - r) / delta + 2;else h = (r - g) / delta + 4;\n    h = Math.round(h * 60);\n    if (h < 0) h += 360;\n    l = (cmax + cmin) / 2;\n    s = delta == 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\n    s = +(s * 100).toFixed(1);\n    l = +(l * 100).toFixed(1);\n    return {\n      h,\n      s,\n      l\n    };\n  }\n}\nexport function generateAvatarSVG(address) {\n  const wag = new WalletAvatarGenerate(new MersenneTwister());\n  return wag.generateAvatarSvg(address);\n}\nexport function generateAvatarURL(address) {\n  const wag = new WalletAvatarGenerate(new MersenneTwister());\n  return wag.generateAvatarURL(address);\n}\nexport function generateAvatarHTML(address) {\n  const wag = new WalletAvatarGenerate(new MersenneTwister());\n  return wag.generateAvatarHTML(address);\n}\nexport function generateAvatarPNG(address, quality) {\n  const wag = new WalletAvatarGenerate(new MersenneTwister());\n  return wag.generateAvatarPNG(address, quality);\n}\nexport default generateAvatarSVG;","map":{"version":3,"names":["MersenneTwister","html","colors","shapeCount","svgNamespaceURI","HSLToHex","hsl","h","s","l","c","Math","abs","x","m","_r","_g","_b","r","round","toString","g","b","length","addressToNumber","address","addr","slice","seed","parseInt","WalletAvatarGenerate","constructor","mt","generateAvatarSvg","generateAvatarHTML","temp","document","createElement","innerHTML","content","firstChild","generateAvatarURL","btoa","canvasRender","size","diameter","canvas","ctx","getContext","height","width","init_seed","remainingColors","hueShift","bgColor","genColor","fillStyle","fillRect","i","total","firstRot","random","angle","PI","velocity","tx","cos","ty","sin","secondRot","rot","fill","p","Path2D","rect","y","DOMMatrix","translate","rotate","transformPoint","resetTransform","generateAvatarPNG","quality","min","toDataURL","bgRectHTML","items","Array","map","_","genShape","svgHTML","getHTML","center","toFixed","transform","rectHTML","idx","floor","color","splice","wobble","amount","hex","colorRotate","degrees","hexToHSL","hue","cmin","cmax","max","delta","generateAvatarSVG","wag"],"sources":["/home/student/Bureau/mÃ©ta/Decentralized-Social-Media/node_modules/@cfx-kit/src/index.ts"],"sourcesContent":["import MersenneTwister from 'mersenne-twister';\nimport html from './html';\n\nconst colors = [\n    '#01888C', // teal\n    '#FC7500', // bright orange\n    '#034F5D', // dark teal\n    '#F73F01', // orangered\n    '#FC1960', // magenta\n    '#C7144C', // raspberry\n    '#F3C100', // goldenrod\n    '#1598F2', // lightning blue\n    '#2465E1', // sail blue\n    '#F19E02', // gold\n];\n\nconst shapeCount = 4;\nconst svgNamespaceURI = 'http://www.w3.org/2000/svg';\n\ninterface HSLType {\n    h: number;\n    s: number;\n    l: number;\n}\n\nfunction HSLToHex(hsl: HSLType) {\n    let { h, s, l } = hsl;\n    s /= 100;\n    l /= 100;\n\n    let c = (1 - Math.abs(2 * l - 1)) * s,\n        x = c * (1 - Math.abs(((h / 60) % 2) - 1)),\n        m = l - c / 2,\n        _r = 0,\n        _g = 0,\n        _b = 0;\n\n    if (0 <= h && h < 60) {\n        _r = c;\n        _g = x;\n        _b = 0;\n    } else if (60 <= h && h < 120) {\n        _r = x;\n        _g = c;\n        _b = 0;\n    } else if (120 <= h && h < 180) {\n        _r = 0;\n        _g = c;\n        _b = x;\n    } else if (180 <= h && h < 240) {\n        _r = 0;\n        _g = x;\n        _b = c;\n    } else if (240 <= h && h < 300) {\n        _r = x;\n        _g = 0;\n        _b = c;\n    } else if (300 <= h && h < 360) {\n        _r = c;\n        _g = 0;\n        _b = x;\n    }\n    // Having obtained RGB, convert channels to hex\n    let r = Math.round((_r + m) * 255).toString(16),\n        g = Math.round((_g + m) * 255).toString(16),\n        b = Math.round((_b + m) * 255).toString(16);\n\n    // Prepend 0s, if necessary\n    if (r.length == 1) r = '0' + r;\n    if (g.length == 1) g = '0' + g;\n    if (b.length == 1) b = '0' + b;\n\n    return '#' + r + g + b;\n}\n\nfunction addressToNumber(address: string): number {\n    const addr = address.slice(2, 10);\n    const seed = parseInt(addr, 16);\n    return seed;\n}\n\nexport class WalletAvatarGenerate {\n    constructor(public mt: MersenneTwister) {}\n    generateAvatarSvg(address: string) {\n        const html = this.generateAvatarHTML(address);\n        const temp = document.createElement('template');\n        temp.innerHTML = html;\n        return temp.content.firstChild as SVGSVGElement;\n    }\n\n    generateAvatarURL(address: string) {\n        const html = this.generateAvatarHTML(address);\n        return `data:image/svg+xml;base64,${btoa(html)}`;\n    }\n\n    private canvasRender(address: string, size: number) {\n        const diameter = size;\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d')!;\n        canvas.height = canvas.width = size;\n        this.mt.init_seed(addressToNumber(address));\n        const remainingColors = this.hueShift(colors.slice());\n        const bgColor = this.genColor(remainingColors);\n        ctx.fillStyle = bgColor;\n        ctx.fillRect(0, 0, diameter, diameter);\n        for (let i = 0; i < shapeCount - 1; i++) {\n            const total = shapeCount - 1;\n            const firstRot = this.mt.random();\n            const angle = Math.PI * 2 * firstRot;\n            const velocity = (diameter * this.mt.random()) / total + (diameter * i) / total;\n\n            const tx = Math.cos(angle) * velocity;\n            const ty = Math.sin(angle) * velocity;\n\n            const secondRot = this.mt.random();\n            const rot = firstRot * 360 + secondRot * 180;\n            const fill = this.genColor(remainingColors);\n\n            const p = new Path2D();\n            p.rect(0, 0, diameter, diameter);\n            ctx.fillStyle = fill;\n            const { x, y } = new DOMMatrix()\n                .translate(0, 0)\n                .rotate(rot)\n                .transformPoint({ x: -diameter / 2, y: -diameter / 2 });\n            ctx.translate(x + diameter / 2 + tx, y + diameter / 2 + ty);\n            ctx.rotate((rot * Math.PI) / 180);\n\n            ctx.fill(p);\n            ctx.resetTransform();\n        }\n        return canvas;\n    }\n\n    generateAvatarPNG(address: string, quality: number = 2) {\n        const size = (quality > 1 ? Math.min(10, quality) : 1) * 100;\n        return this.canvasRender(address, size).toDataURL('image/png', 1);\n    }\n\n    generateAvatarHTML(address: string) {\n        this.mt.init_seed(addressToNumber(address));\n        const remainingColors = this.hueShift(colors.slice());\n        const bgColor = this.genColor(remainingColors);\n        const bgRectHTML = html`<rect x=\"0\" y=\"0\" width=\"100\" height=\"100\" fill=\"${bgColor}\"></rect>`;\n\n        const items = Array(shapeCount - 1)\n            .fill('$')\n            .map((_, i) => {\n                return this.genShape(remainingColors, i, shapeCount - 1);\n            });\n\n        const svgHTML = html`<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 100 100\" xmlns=\"${svgNamespaceURI}\">${bgRectHTML}${items}</svg>`;\n\n        return svgHTML.getHTML();\n    }\n\n    genShape(remainingColors: Array<string>, i: number, total: number) {\n        const diameter = 100;\n        const center = diameter / 2;\n        const firstRot = this.mt.random();\n        const angle = Math.PI * 2 * firstRot;\n        const velocity = (diameter / total) * this.mt.random() + (i * diameter) / total;\n\n        const tx = Math.cos(angle) * velocity;\n        const ty = Math.sin(angle) * velocity;\n\n        const translate = 'translate(' + tx + ' ' + ty + ')';\n        const secondRot = this.mt.random();\n        const rot = firstRot * 360 + secondRot * 180;\n        const rotate = 'rotate(' + rot.toFixed(1) + ' ' + center + ' ' + center + ')';\n        const transform = translate + ' ' + rotate;\n        const fill = this.genColor(remainingColors);\n\n        const rectHTML = html`<rect x=\"0\" y=\"0\" width=\"${diameter}\" height=\"${diameter}\" transform=\"${transform}\" fill=\"${fill}\"></rect>`;\n        return rectHTML;\n    }\n    genColor(colors: Array<string>) {\n        // must call once\n        this.mt.random();\n        const idx = Math.floor(colors.length * this.mt.random());\n        const color = colors.splice(idx, 1)[0];\n        return color;\n    }\n    hueShift(colors: Array<string>) {\n        const wobble = 30;\n        const amount = this.mt.random() * 30 - wobble / 2;\n        const rotate = (hex: string) => this.colorRotate(hex, amount);\n        return colors.map(rotate);\n    }\n    colorRotate(hex: string, degrees: number) {\n        const hsl = this.hexToHSL(hex);\n        let hue = hsl.h;\n        hue = (hue + degrees) % 360;\n        hue = hue < 0 ? 360 + hue : hue;\n        hsl.h = hue;\n        return HSLToHex(hsl);\n    }\n    hexToHSL(hex: string) {\n        // Convert hex to RGB first\n        let r = parseInt('0x' + hex[1] + hex[2]);\n        let g = parseInt('0x' + hex[3] + hex[4]);\n        let b = parseInt('0x' + hex[5] + hex[6]);\n        // Then to HSL\n        r /= 255;\n        g /= 255;\n        b /= 255;\n        let cmin = Math.min(r, g, b),\n            cmax = Math.max(r, g, b),\n            delta = cmax - cmin,\n            h = 0,\n            s = 0,\n            l = 0;\n\n        if (delta == 0) h = 0;\n        else if (cmax == r) h = ((g - b) / delta) % 6;\n        else if (cmax == g) h = (b - r) / delta + 2;\n        else h = (r - g) / delta + 4;\n\n        h = Math.round(h * 60);\n\n        if (h < 0) h += 360;\n\n        l = (cmax + cmin) / 2;\n        s = delta == 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\n        s = +(s * 100).toFixed(1);\n        l = +(l * 100).toFixed(1);\n\n        return { h, s, l };\n    }\n}\n\nexport function generateAvatarSVG(address: string) {\n    const wag = new WalletAvatarGenerate(new MersenneTwister());\n    return wag.generateAvatarSvg(address);\n}\n\nexport function generateAvatarURL(address: string) {\n    const wag = new WalletAvatarGenerate(new MersenneTwister());\n    return wag.generateAvatarURL(address);\n}\n\nexport function generateAvatarHTML(address: string) {\n    const wag = new WalletAvatarGenerate(new MersenneTwister());\n    return wag.generateAvatarHTML(address);\n}\n\nexport function generateAvatarPNG(address: string, quality?: number) {\n    const wag = new WalletAvatarGenerate(new MersenneTwister());\n    return wag.generateAvatarPNG(address, quality);\n}\n\nexport default generateAvatarSVG;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}